<?xml version="1.0" encoding="GB2312"?>
<SQLTEST>	
	<!-- 
	 	修改记录列表
	 	序号		修改类型		修改内容		修改人		修改日期
	 	1		创建			创建文件		孙峰		2005/05/24
	-->
	<CONTENT> 这是一个有关如何使用NEWTRANS关键字来创建事务测试脚本的样例模板 </CONTENT>
	<SQL_CASE><!-- 在主脚本中建表，以便删除，当然也可以在新创建的事务中建，但是事务脚本中不支持CLEAR关键字 -->
		<TYPE> DIRECT_EXECUTE_IGNORE </TYPE>
		<SQL> DROP TABLE TT</SQL>
		<TYPE> DIRECT_EXECUTE_SUCCESS </TYPE>
		<SQL> CREATE TABLE TT(CO INT PRIMARY KEY, C1 INT);</SQL>
	</SQL_CASE>		
	<NEWTRANS></NEWTRANS><!-- 创建一个事务进程，它的ID为0 -->
	<NEWTRANS></NEWTRANS><!-- 创建一个事务进程，它的ID为1(如果下面还有NEWTRANS关键字创建的事务进程，那么ID号往下类推) -->
	<TRANS0><!-- ID号为0的事务 -->
		<BEGINTRANS>Serializable</BEGINTRANS><!-- 开始事务 --><!-- Serializable 代表最高的隔离级 -->
		<SQL_CASE>
			<SQL> INSERT INTO TT VALUES(1, 1) </SQL>
		</SQL_CASE>
		<SQL_CASE><!-- 下面试例是比较结果集，用来验证未提交的插入操作在这个事务里面是否有效 -->
			<TYPE> DIRECT_EXECUTE_SELECT_COMPARE_RESULT </TYPE><!-- 预期执行成功，并返回一个结果集，只验证给定值的长度 -->
			<SQL> SELECT * FROM TT </SQL>
			<RESULT>
				<RECORD>
					<COLUMN>1</COLUMN><COLUMN>1</COLUMN>
				</RECORD>
			</RESULT>
		</SQL_CASE>		
	</TRANS0>
	<SLEEP>1000</SLEEP><!-- 挂起五秒再发送第二个事务的脚本，确保第一个事务的脚本有充分的时间被执行 -->
	<TRANS1><!-- ID号为1的事务  -->
		<BEGINTRANS></BEGINTRANS><!-- 开始事务 -->
		<SQL_CASE><!-- 试图将一个跟上一个事务重复的值插入到表中，如果上一个事务回滚，那么插入可以成功，如果提交，那么会插入失败 -->
			<SQLSTATE> 23000 </SQLSTATE><!-- 违反完整性约定 -->
			<NERROR> -3100</NERROR><!-- 违反唯一约束 -->
			<TYPE> DIRECT_EXECUTE_FAIL </TYPE><!-- 预期执行失败 -->			
			<SQL> INSERT INTO TT VALUES(1, 1) </SQL><!-- 执行到这时，事各会被锁住，只有在上一个事务提交以后，才会报错 -->
		</SQL_CASE>
	</TRANS1>
	<SLEEP>1000</SLEEP><!-- 挂起1秒再发送事务的脚本，确保第二个事务的脚本有充分的时间被执行 -->
	<TRANS0>
		<ENDTRANS>COMMIT</ENDTRANS><!-- 提交ID号为0的事务-->
		<BEGINTRANS>Serializable</BEGINTRANS><!-- 再次开始事务 --><!-- Serializable 代表最高的隔离级 -->
		<SQL_CASE>
			<SQL> INSERT INTO TT VALUES(2, 2) </SQL>
		</SQL_CASE>
	</TRANS0>
	<SLEEP>1000</SLEEP><!-- 挂起1秒再发送事务的脚本, 确保事务的脚本有充分的时间被执行 -->
	<TRANS1>
		<SQL_CASE>
			<SQL> INSERT INTO TT VALUES(2, 2) </SQL><!-- 在上个事务回滚以后，它应该能插入成功 -->
		</SQL_CASE>
		<SQL_CASE><!-- 下面试例是比较结果集，用来验证未提交的插入操作在这个事务里面是否有效 -->
			<TYPE> DIRECT_EXECUTE_SELECT_COMPARE_RESULT </TYPE><!-- 预期执行成功，并返回一个结果集，只验证给定值的长度 -->
			<SQL> SELECT * FROM TT </SQL>
			<RESULT>
				<RECORD>
					<COLUMN>1</COLUMN><COLUMN>1</COLUMN>
				</RECORD>
				<RECORD>
					<COLUMN>2</COLUMN><COLUMN>2</COLUMN>
				</RECORD>
			</RESULT>
		</SQL_CASE>		
		<ENDTRANS>COMMIT</ENDTRANS><!-- 提交ID号为1的事务-->
	</TRANS1>
	<SLEEP>1000</SLEEP><!-- 挂起1秒再发送事务的脚本, 确保事务的脚本有充分的时间被执行 -->	
	<TRANS0>
		<ENDTRANS>ROLLBACK</ENDTRANS><!-- 回滚ID号为0的事务-->
	</TRANS0>

	<CLEAR><!-- 测试用例清除块，该关键字标识清除块开始。如果上面某条语句执行出错后，程序会自动跳到这块来做环境清除工作 -->

		<SQL_CASE>
			<SQL> DROP TABLE TT</SQL>
		</SQL_CASE>	
	</CLEAR>
</SQLTEST>